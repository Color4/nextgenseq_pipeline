############
#       STAR
############
rule STAR_TPM:
	input: 
		R1="{subject}/{TIME}/FQ/{sample}_R1.fastq.gz",
        	R2="{subject}/{TIME}/FQ/{sample}_R2.fastq.gz",
		ref=config["reference"],
		gtf1=config['GTF']['UCSC'],
	output:
		temp("{subject}/{TIME}/{sample}/{sample}.star_UCSC.bam"),
		temp("{subject}/{TIME}/{sample}/{sample}.star_UCSC.bam.bai")
	version: config["STAR"]
	params:
		rulename  = "STAR",
		batch     = config[config['host']]['job_STAR_TPM'],
		star_ref  = config['STAR_ref'],
		awk       = NGS_PIPELINE + "/scripts/SJDB.awk",
		home      = WORK_DIR,
	shell: """
	#######################
	module load STAR/{version} samtools
	cd ${{LOCAL}}/
	# run 1st pass
	STAR --outTmpDir STEP1 \
		--genomeDir {params.star_ref} \
		--readFilesIn {params.home}/{input.R1} {params.home}/{input.R2} \
		--readFilesCommand zcat\
		--outSAMtype BAM SortedByCoordinate\
		--outFileNamePrefix {wildcards.sample} \
		--runThreadN ${{THREADS}} \
		--outFilterMismatchNmax 2
	echo "Finished Step 1"

	# make splice junctions database file out of SJ.out.tab, filter out non-canonical junctions
	mkdir GenomeForPass2
	awk -f {params.awk} {wildcards.sample}SJ.out.tab > GenomeForPass2/{wildcards.sample}.out.tab.Pass1.sjdb
	echo "Finished Step 2"

	# generate genome with junctions from the 1st pass
	STAR --outTmpDir STEP2\
		--genomeDir GenomeForPass2\
		--runMode genomeGenerate\
		--genomeSAindexNbases 8\
		--genomeFastaFiles {input.ref}\
		--sjdbFileChrStartEnd GenomeForPass2/{wildcards.sample}.out.tab.Pass1.sjdb\
		--sjdbOverhang 100\
		--runThreadN ${{THREADS}}
	echo "Finished Step 3"

	# run 2nd pass with the new genome
	STAR --outTmpDir STEP3\
		--genomeDir GenomeForPass2\
		--runThreadN ${{THREADS}}\
		--outSAMattributes All\
		--readFilesIn {params.home}/{input.R1} {params.home}/{input.R2}\
		--outSAMtype BAM SortedByCoordinate\
		--sjdbGTFfile {input.gtf1}\
		--readFilesCommand zcat\
		--outFileNamePrefix {wildcards.sample}_ucsc
	mv -f {wildcards.sample}_ucscAligned.sortedByCoord.out.bam {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star_UCSC.bam
	echo "Finished Step 4"
	samtools index {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star_UCSC.bam
	#######################
	"""
############
# featureCounts
#############
rule FeatureCounts:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.star_UCSC.bam",
		ref=lambda wildcards: config['GTF'][wildcards.gtf],
		script=NGS_PIPELINE + "/scripts/featureCounts.v2.R",
		trasncriptRDS=lambda wildcards: config['RDS'][wildcards.gtf],
		geneRDS=lambda wildcards: config['RDS'][wildcards.gtf].replace('transcript', 'gene'),
		exonRDS=lambda wildcards: config['RDS'][wildcards.gtf].replace('transcript', 'exon'),
	output:
		"{base}/{TIME}/{sample}/TPM_{gtf}/{sample}.transcript.TPM.txt",
		"{base}/{TIME}/{sample}/TPM_{gtf}/{sample}.gene.TPM.txt",
		"{base}/{TIME}/{sample}/TPM_{gtf}/{sample}.exon.TPM.txt",
	version: config['version_R']
	params:
		rulename   = "featureCounts",
		batch      =config[config['host']]['job_featCount'],
		work_dir =  WORK_DIR
	shell: """
	#######################
	module load R/{version}
	cd ${{LOCAL}}
	{input.script} --nt ${{THREADS}} --lib="{wildcards.sample}" --targetFile="{params.work_dir}/{input.bam}" --referenceGTF="{input.ref}" --featureType="transcript" --resultOut="{params.work_dir}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/TPM_{wildcards.gtf}/" --annotationRDS={input.trasncriptRDS}
	{input.script} --nt ${{THREADS}} --lib="{wildcards.sample}" --targetFile="{params.work_dir}/{input.bam}" --referenceGTF="{input.ref}" --featureType="gene" --resultOut="{params.work_dir}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/TPM_{wildcards.gtf}/" --annotationRDS={input.geneRDS}
	{input.script} --nt ${{THREADS}} --lib="{wildcards.sample}" --targetFile="{params.work_dir}/{input.bam}" --referenceGTF="{input.ref}" --featureType="exon" --resultOut="{params.work_dir}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/TPM_{wildcards.gtf}/" --annotationRDS={input.exonRDS}
	#######################
	"""
